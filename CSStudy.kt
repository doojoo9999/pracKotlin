class CSStudy {
    1. SQL Injection
    SQL 인젝션은 웹 사이트의 보안 허점을 이용해 특정 SQL 쿼리문을 전송해 DB의 정보를 탈취하는 것을 말한다.

    클라이언트가 입력한 데이터를 제대로 필터링해 문제를 방지해야 한다.

    해킹의 난이도가 매우 낮으나, 피해가 크기에 보안 위협 1순위로 꼽힌다.

    ## 정상적인 로그인

        select * from member where id = “parkbro” and password = “doojoo”

    []()

    → id가 parkbro고, password가 doojoo 일 경우에 로그인 성공

    ## 비정상적인 로그인

        select * from member where id = “parkbro” and password = ‘ or ‘1’ =’ 1

    **‘ or ‘1’ =’ 1
    → 1=1은 참이므로 이 구문은 참이되어 로그인에 성공한다.**

    이를 응용해서 select * from member where id = “parkbro” and password = ‘ or ‘1’ =’ 1 +

    drop table select * from posts **삭제쿼리**

    등을 통해 DB를 삭제하거나, 다른 사용자의 정보를 가져오거나 DB 데이터를 탈취할 수도 있다.

    ## 어떻게 막아야 할까

    Spring Data JPA를 사용한 우리는 영향을 받지 않았다.

    JPA (Java Persistence API) 는 SQL 쿼리를 직접 대입하는 것이 아니라 메소드 기반의 쿼리를 작성한다.

    (findById 등)

    **SQL 쿼리 내에 직접 사용자 입력 값을 포함시키지 않고 입력 값을 조회하기 때문**에 안전하다.

    Spring Security와 함께 사용할 수 있는 Validation Framework 등을 통해 입력값을 검증하는 것도 중요하다.


    ## 쿠키와 세션을 사용하는 이유

    서버는 클라이언트가 누구인지 확인하기 위해 모든 Request를 확인하는 과정을 거친다.

    이를 보완하기 위해 쿠키와 세션을 사용하게 된다.

    ## 쿠키

    ### 쿠키는?

    쿠키는 클라이언트(브라우저) 로컬 스토리지에 key-value 형태로 들어있는 아주 작은 데이터 파일이다.

    유효 시간을 정할 수 있으며, 브라우저가 종료되어도 인증이 유지된다.

    브라우저가 Request가 발생할 때 자동으로 Request Header에 담아 서버에 전송한다.

    ### 사용 예시

    로그인 기록 저장하기

    쇼핑몰의 장바구니

    팝업 알림 등에서 “24시간 동안 보지 않기” 등

    ## 세션

    ### 세션은?

    세션도 쿠키를 사용함. 다만, 쿠키를 사용자의 브라우저 로컬 스토리지에 두는 것이 아니라 서버에서 관리한다.

    서버는 클라이언트를 구분하기 위해 사용자에게 세션ID를 부여하며, 웹 브라우저가 서버에 접속해서
    브라우저가 종료될 때까지 인증상태를 유지한다.

    사용자에 대한 정보를 서버에서 관리하기 때문에 보안이 좋지만, 사용자가 많아질수록 메모리를 더 많이 사용하게 된다. (성능 저하의 원인이 될 수 있음)

    ### 사용 예시

    보안상 중요한 작업을 수행할 때 사용 (로그인, 백오피스 등)

    ## 쿠키와 세션의 차이

    세션도 쿠키를 사용하기 때문에 쿠키와 세션은 비슷한 역할을 하며, 동작 원리도 비슷함.

    가장 큰 차이점은 **사용자의 정보가 어디에 보관되냐?**

    쿠키는 서버의 자원을 전혀 사용하지 않으며, 세션은 서버의 자원을 사용함

    보안은 세션이 우수하고, 속도는 쿠키가 우수함

    최근에는 쿠키와 세션 등의 문제를 보완한 토큰 기반의 인증방식을 사용하는 추세 (JWT)
}