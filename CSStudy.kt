class CSStudy {
    1. SQL Injection
    SQL 인젝션은 웹 사이트의 보안 허점을 이용해 특정 SQL 쿼리문을 전송해 DB의 정보를 탈취하는 것을 말한다.

    클라이언트가 입력한 데이터를 제대로 필터링해 문제를 방지해야 한다.

    해킹의 난이도가 매우 낮으나, 피해가 크기에 보안 위협 1순위로 꼽힌다.

    ## 정상적인 로그인

        select * from member where id = “parkbro” and password = “doojoo”

    []()

    → id가 parkbro고, password가 doojoo 일 경우에 로그인 성공

    ## 비정상적인 로그인

        select * from member where id = “parkbro” and password = ‘ or ‘1’ =’ 1

    **‘ or ‘1’ =’ 1
    → 1=1은 참이므로 이 구문은 참이되어 로그인에 성공한다.**

    이를 응용해서 select * from member where id = “parkbro” and password = ‘ or ‘1’ =’ 1 +

    drop table select * from posts **삭제쿼리**

    등을 통해 DB를 삭제하거나, 다른 사용자의 정보를 가져오거나 DB 데이터를 탈취할 수도 있다.

    ## 어떻게 막아야 할까

    Spring Data JPA를 사용한 우리는 영향을 받지 않았다.

    JPA (Java Persistence API) 는 SQL 쿼리를 직접 대입하는 것이 아니라 메소드 기반의 쿼리를 작성한다.

    (findById 등)

    **SQL 쿼리 내에 직접 사용자 입력 값을 포함시키지 않고 입력 값을 조회하기 때문**에 안전하다.

    Spring Security와 함께 사용할 수 있는 Validation Framework 등을 통해 입력값을 검증하는 것도 중요하다.


    ## 쿠키와 세션을 사용하는 이유

    서버는 클라이언트가 누구인지 확인하기 위해 모든 Request를 확인하는 과정을 거친다.

    이를 보완하기 위해 쿠키와 세션을 사용하게 된다.

    ## 쿠키

    ### 쿠키는?

    쿠키는 클라이언트(브라우저) 로컬 스토리지에 key-value 형태로 들어있는 아주 작은 데이터 파일이다.

    유효 시간을 정할 수 있으며, 브라우저가 종료되어도 인증이 유지된다.

    브라우저가 Request가 발생할 때 자동으로 Request Header에 담아 서버에 전송한다.

    ### 사용 예시

    로그인 기록 저장하기

    쇼핑몰의 장바구니

    팝업 알림 등에서 “24시간 동안 보지 않기” 등

    ## 세션

    ### 세션은?

    세션도 쿠키를 사용함. 다만, 쿠키를 사용자의 브라우저 로컬 스토리지에 두는 것이 아니라 서버에서 관리한다.

    서버는 클라이언트를 구분하기 위해 사용자에게 세션ID를 부여하며, 웹 브라우저가 서버에 접속해서
    브라우저가 종료될 때까지 인증상태를 유지한다.

    사용자에 대한 정보를 서버에서 관리하기 때문에 보안이 좋지만, 사용자가 많아질수록 메모리를 더 많이 사용하게 된다. (성능 저하의 원인이 될 수 있음)

    ### 사용 예시

    보안상 중요한 작업을 수행할 때 사용 (로그인, 백오피스 등)

    ## 쿠키와 세션의 차이

    세션도 쿠키를 사용하기 때문에 쿠키와 세션은 비슷한 역할을 하며, 동작 원리도 비슷함.

    가장 큰 차이점은 **사용자의 정보가 어디에 보관되냐?**

    쿠키는 서버의 자원을 전혀 사용하지 않으며, 세션은 서버의 자원을 사용함

    보안은 세션이 우수하고, 속도는 쿠키가 우수함

    최근에는 쿠키와 세션 등의 문제를 보완한 토큰 기반의 인증방식을 사용하는 추세 (JWT)


    # 3
    *Url으로 요청이 들어올 때부터 나갈 때까지 Spring 동작을 아는 범위에서 전부 설명해주세요.”*

    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/ffaf864a-43d4-41ea-be9d-3620fb351510/36ad3fb8-d400-470a-8f7d-5346407c27bb/Untitled.png)

    https://terasolunaorg.github.io/guideline/1.0.1.RELEASE/en/Overview/SpringMVCOverview.html

    자주 보던 이름들이 보인다.

    우리는 전체 과정을 아래와 같이 나눌 수 있다.

    1. 클라이언트 요청
    2. 서버 수신
    Spring Boot가 실행되고 있는 서버가 요청을 수신한다.
    서버에는 Tomcat, Netty 등이 있다 (스프링 부트에 내장되어 있음)
    3. 디스패처 서블릿
    Spring Boot는 요청을 디스패처 서블릿으로 전달하고, 디스패처 서블릿은 요청을 처리하기 위한 중심 역할을 함
    4. 핸들러 매핑
    디스패처 서블릿은 요청 URL을 기반으로 적절한 컨트롤러를 찾음.
    가장 일반적으로 우리가 컨트롤러에 `@RequestMapping` 어노테이션을 사용해 URL과 컨트롤러 메서드를 매핑함
    5. 컨트롤러
    매핑된 컨트롤러가 요청을 처리함. 컨트롤러에서 비즈니스 로직을 실행하거나, 서비스 레이어를 호출해 데이터를 가져옴
    6. 서비스
    비즈니스 로직을 담당. 컨트롤러에서 호출될 경우 필요한 작업을 수행하고 결과를 반환
    7. 레포지토리
    서비스 레이어에서 DB작업이 필요한 경우 레포지토리 레이어를 호출. DB와 상호작용을 담당
    8. 응답 생성
    컨트롤러는 서비스 레이어에서 받은 데이터를 기반으로 HTTP 응답을 생성
    `@ResponseEntity` 를 사용해서 상태 코드와 함께 반환할 수 있음.

    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/ffaf864a-43d4-41ea-be9d-3620fb351510/6281ff0e-ed66-4d5f-a281-8aef24b40693/Untitled.png)

    1. 뷰 리졸버
    View를 반환해야 하는 경우 디스패처서블릿은 뷰 리졸버를 사용해서 적절한 뷰를 찾고 렌더링함.
    ThymeLeaf 등이 사용되어 뷰를 반환
    2. 응답 전송
    최종적으로 생성된 응답은 디스패처서블릿을 통해 클라이언트에게 전송됨
    3. 클라이언트 수신

    이 과정을 정확하게 설명할 수 있다면 가장 모범적인 답변이겠지만, 어려울 경우

    요청 → 디스패처 서블릿 → 우리가 했던거( Controller → Service → Repository) → 디스패처 서블릿 → 응답
    정도로 답변할 수 있음.

    스프링 부트는 이러한 과정들을 자동으로 설정하고, 관리해주기에 비즈니스 로직에 집중할 수 있음을 곁들이면 좋

    ## 디스패처 서블릿이란?

    https://mangkyu.tistory.com/18
}