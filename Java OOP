객체지향 프로그래밍의 5가지 원칙

SRP (Single Responsibility Principle) : 단일 책임 원칙
클래스는 단일 책임을 가져야 하며, 클래스를 변경할 이유는 그 책임 때문이어야 한다는 원칙
이는 클래스 변경 시 생기는 사이드 이펙트를 제거함으로써 유지보수성을 높이기 위한 것 이다.
따라서 각 클래스와 모듈은 단일 작업에 중점을 두어야 하며, 같은 클래스안에 다른 이유때문에 변경될 메서드를 넣어선 안된다.


OCP (Open-Closed Principle) : 개방 폐쇄 원칙

소프트웨어 요소(클래스, 모듈, 함수등)은 확장에 열려있어야 하고, 변경에는 닫혀 있어야 한다는 원칙

→ 어떤 클래스를 수정할 때 그 클래스를 이용하는 코드들을 고쳐야 한다면 유지보수성이 떨어지게 된다.
따라서 OCP원칙에 따라 추상화와 다형성 등을 이용해 기존 코드를 수정하지 않고 기능을 확장할 수 있어야 한다.

LSP (Liskov Substitution Principle) : 리스코프 치환 원칙

자식 클래스는 부모 클래스에서 가능한 행위를 수행할 수 있어야 한다는 원칙

→ 즉 OPP의 4가지 특징중 상속관계가 성립해야 한다는 것

ISP (Interface Segragation Principle) : 인터페이스 분리 원칙

몇 개의 큰 인터페이스가 있는 편 보다, 작은 인터페이스가 많은 편이 더 바람직 하다.

DIP (Dependencty Inversion Principle) : 의존성 역전의 원칙
추상화된 것은 구체적인 것에 의존하면 안 된다는 원칙. 구체적인 것이 추상화된 것에 의존해야 한다.
→ 고수준의 모듈은 저수준의 모듈 구현에 의존하면 안되고, 구체적인 클래스 보다 추상적인 클래스에 의존해야 한다.

→ 구체적인 것에 의존하게 된다면 유연성이 떨어지기 때문이다.
즉 추상화 특성을 지키면서 저수준의 모듈이 변경 되어도 고수준의 모듈은 변경될 필요가 없어야 한다.
