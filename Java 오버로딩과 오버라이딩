오버로딩
한 클래스 내에 동일한 이름의 메소드를 여러개 정의하는 것
메소드 간 이름이 동일해야한다.
단, 매개변수의 개수 및 타입이 전부 동일하다면 오버로딩이 아니다.

int add(int x, int y, int z) {
    int result = x + y + z;
    return result;
}

long add(int a, int b, long c) {
    long result = a + b + c;
    return result;
}

int add(int a, int b) {
    int result = a + b;
    return result;
}
// 오버로딩의 조건에 부합하는 예제
오버라이딩
부모 클래스로부터 상속받은 메소드의 내용을 변경하는 것
상속받은 메소드를 그대로 사용하기도 하지만, 필요에 의해 변경해야할 경우 오버라이딩을 한다.
부모 클래스의 메소드와 이름, 매개변수, 반환타입이 동일해야한다.

class Animal {
    String name;
    String color;

    public void cry() {
        System.out.println(name + " is crying.");
    }
}

class Dog extends Animal {
	//생성자
    Dog(String name) {
        this.name = name;
    }
	// 오버라이딩
    @Override
    public void cry() {
        System.out.println(name + " is barking!");
    }
    public void swim() {
        System.out.println(name + " is swimming.");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal dog = new Dog("코코");
        // Animal 클래스인 dog는 자식 클래스 Dog의 swim() 사용 불가
        // 쉽게 말해 부모 클래스는 자식 클래스의 메소드를 사용하지 못한다.
        // 하지만 할당 시 오버라이딩한 cry()는 적용되어 is barking이 출력된다.
        dog.cry();
    }
}
자식(Dog) 객체는 자식(Dog) 타입으로 선언된 변수에도 할당할 수 있고, 부모(Animal) 타입으로 선언된 변수에도 할당할 수 있습니다. 단, 부모(Animal) 타입의 변수로 사용할 때는, 실제 객체를 만들(new) 때 사용한 자식(Dog) 타입에 있는 함수 (여기서는 swim())을 호출할 수 없습니다. 컴파일 에러입니다.

즉 오버로딩은 기존에 없는 새로운 메소드를 정의하는 것이며 오버라이딩은 상속받은 메소드의 내용을 변경하는 것이다.


---

오버라이딩은 상위 클래스에서 정의된 메소드를 하위 클래스에 재정의 하는 것을 말한다. 즉, 상위 클래스에서 정의된 메소드를 하위 클래스에 덮어씌우는것
오버라이딩을 하게 되면 상위 클래스에서 정의한 메소드 대신 하위 클래스에서 정의한 메소드가 호출된다. 이때 하위 클래스에서 재정의한 메소드는 상위 클래스의 메소드와 동일한 이름, 매개변수 타입, 반환 타입을 가져야 한다. 또한 하위 클래스에서 재정의한 메소드는 상위 클래스에서 정의된 메소드와 같은 접근 제어자나 더 높은 접근 제어자를 가져야 한다.

→ 더 높은 접근 제어자 → 가장 높은 접근 제어자 pulbic
출처: https://jindream6128.tistory.com/50 [진근이의 개발 일기 Vlog:티스토리]