자바 메모리 영역

자바에서는 크게 5개의 JVM메모리 영역을 사용한다.

메서드(Method) 영역

바이트 코드 파일을 읽은 내용이 저장되는 영역.
클래스 파일의 상수, 정적 필드, 메서드 코드, 생성자 코드 등이 저장된다.

힙(Heap) 영역

객체와 배열이 저장되는 동적 메모리 영역.
모든 객체와 배열은 힙 영역에 생성되며, JVM에서 자동으로 메모리를 할당하고 해제한다.

스택(Stack)영역

각 스레드마다 하나씩 존재하는 영역, 지역 변수, 매개변수, 리턴 값, 연산 시 일시적으로 사용되는 임시 값 등이 저장된다.
메서드의 실행이 끝나면 스택 프레임이 제거 된다.

PC 레지스터(Program Counter Register)

스레드마다 하나씩 존재하는 영역으로, 현재 실행 중인 JVM 명령어의 주소를 가지고 있다.

네이티브 메서드 스택 (Native Method Stack)

자바 외부에서 작성된 네이티브 코드(C, C++, 어셈블리 등)을 실행하는 데 사용되는 스택 영역

→ 각 영역들은 JVM에서 자동으로 관리하며 개발자는 메서드 영역과 힙 영역에 직접적으로 접근하지 않고,
객체 생성과 호출을 통해 자동으로 메모리를 할당하고 관리하도록 해준다.
(참고)  각 스레드 마다란?
→ 각 스레드마다는 독립적인 실행 흐름을 가지고 있다. 이 실행 흐름에는 필요한 메모리 공간을 가지고 있다.
스레드는 프로그램 내에서 동시에 여러 작업을 수행할 수 있도록 하는 것 이며, 이를 가능하게 하는 것이 바로 스레드 스케줄러 이다.
스레드 스케줄러는 스레드가 실행, 종료 시점을 결정하며 이를 위해 각 스레드에게 일정 시간 동안 CPU를 할당한다.
이 때, 각 스레드 마다 자신만의 실행 흐름과 메모리 공간을 가지고 있기 때문에 다른 스레드의 영향을 받지 않고 독립적으로 작동할 수 있다.
==
자바에서는 각 스레드 마다 스택(stack) 메모리와 PC(Program Counter)레지스터를 할당 한다.
스택 메모리는 각 스레드마다 독립적으로 할당되며, 메서드 호출 시 지역 변수와 매개 변수를 저장하는 데 사용된다.
PC 레지스터는 현재 실행 중인 스레드가 다음에 실행할 명령어의 주소를 가지고 있다.
따라서 각 스레드는 자신만의 실행 흐름과 메모리 영역을 가지고 독립적인 실행 흐름을 갖는다.